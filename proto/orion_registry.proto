syntax = "proto3";

option go_package=".;proto";

service Registry {
  // Subscribe to the event stream
  rpc SubscribeToStream(InitializeRequest) returns (stream RPCEvent);
  // When an existing client wants to initiate a connection to a new or existing peer.
  rpc InitializeConnectionToPeer(InitializeConnectionToPeerRequest) returns (InitializeConnectionToPeerResponse);
}

// Data sent by a client to initialize an orion membership session
message InitializeRequest {
  string friendly_name = 1;
  int64 timestamp_signed = 2;
  bytes signed = 3;
  int64 member_id = 4;
  bytes certificate = 5;
}

// Event sent to all clients when a new orion session is initialized.
message ClientNewOnNetworkEvent {
  string friendly_name = 1;
  int64 peer_id = 2;
}

// Event sent to a client when another clients when a clients wants to initiate a peer-to-peer link.
message ClientWantsToInitiateLinkEvent {
  string friendly_name = 1;
  int64 peer_id = 2;
}

// Sent when a clients lost connection and needs to be completely kicked from the network.
message ClientDisconnectedTeardownEvent {
  string friendly_name = 1;
  int64 peer_id = 2;
}

message RPCEvent {
  oneof event {
    ClientNewOnNetworkEvent client_new_on_network_event = 1;
    ClientWantsToInitiateLinkEvent client_wants_to_initiate_link_event = 2;
    ClientDisconnectedTeardownEvent client_disconnected_teardown_event = 3;

  }
}

// Send to a peer to indicate that another connection is possible to 
// the specified.
message InitializeConnectionToPeerRequest {
  string member_id = 1;
  string endpoint = 2;
  string public_key = 3;
  string preshared_key = 4;
}

// Response to a connection request.
message InitializeConnectionToPeerResponse {}
