syntax = "proto3";

option go_package=".;proto";

service Registry {
  // Subscribe to the event stream
  rpc SubscribeToStream(stream RPCClientEvent) returns (stream RPCServerEvent);
}

// Event sent to all clients when a new orion client joined the network
message ClientNewOnNetworkEvent {
  string friendly_name = 1;
  uint32 peer_id = 2;
}

// Sent when a clients lost connection and needs to be completely kicked from the network.
message ClientDisconnectedTeardownEvent {
  string friendly_name = 1;
  uint32 peer_id = 2;
}


message RPCServerEvent {
  oneof event {
    ClientNewOnNetworkEvent new_client = 1;
    ClientDisconnectedTeardownEvent removed_client = 2;
    ClientWantToConnectToClient wants_to_connect = 3;
    ClientWantToConnectToClientResponse wants_to_connect_response = 4;
  }
}

// Data sent by a client to initialize an orion membership session
message InitializeRequest {
  string friendly_name = 1;
  int64 timestamp_signed = 2;
  bytes signed = 3;
  uint32 member_id = 4;
  bytes certificate = 5;
}

// Sent by the clients when wanting to initialize a new peer to peer request
message ClientWantToConnectToClient {
      string endpoint_addr = 1;
      uint32 endpoint_port = 2;
      bytes public_key = 3;
      string friendly_name = 5;
      uint32 destination_peer_id = 6;
      uint32 source_peer_id = 7;
}

// Response to a ClientWantToConnectToClient
message ClientWantToConnectToClientResponse {
  string endpoint_addr = 1;
  uint32 endpoint_port = 2;
  bytes public_key = 3;
  string friendly_name = 4;
  uint32 destination_peer_id = 5;
  bytes preshared_key = 7;
  uint32 source_peer_id = 6;
}

message RPCClientEvent {
  oneof event {
      // First message sent to the server in order to initialize the stream status.
      InitializeRequest initialize = 1;
      // Sent when the clients wants to connect to a new client
      ClientWantToConnectToClient connect = 2;
      ClientWantToConnectToClientResponse connect_response = 3;
  }
}